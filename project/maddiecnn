#!/usr/bin/env python
'''Identify my 4 dogs using CNN based on Keras.

Image dataset
-------------
    Image files are prefixed with the following convention:
    1) Each file name consists of:
    <Dog classifier code>_<5 digit sequence number>.jpg

    Dog classifier code contain 0 or any of the following classifiers:
    m: Maddie
    o: Olivia
    p: Pink
    a: Aimee

    Some examples:
    if a photo contains a picture of just Maddie, then the file name can be:
    m_00582.jpg

    if a photo contains a picture of both Maddie and Olivia, then the file name can be:
    mo_00582.jpg

    If a photo does not contain any of the dogs,
    _00582.jpg

Notes
-----
    1. Requirements to run this script.
        I am using virtualenv with Python 3.5.
    2. To view training on Tensorboard
       Invoke tensorboard by:
           tensorboard --logdir=<specify the directory is set to TENSORBOARD_LOG_DIR>
       Navigate to http://0.0.0.0:6006 in your browser.

To Do's
-------
    This file is still being updated.
    To-do items are:
    1. Change the Keras model to functional API.

__author__ = "Hide Inada"
__copyright__ = "Copyright 2018, Hide Inada"
__license__ = "The MIT license"
__email__ = "hideyuki@gmail.com"

'''

import os
import logging
from pathlib import Path

from keras.callbacks import TensorBoard

from project.dataload import load_training_set_and_test_set
from project.cnn import cnn
from project.config import load_config

log = logging.getLogger(__name__)
logging.basicConfig(level=os.environ.get("LOGLEVEL", "DEBUG"))  # Change the 2nd arg to INFO to suppress debug logging
config = load_config()


def train():
    """Train the model to identify images of dogs by CNN."""

    x_train, y_train, x_test, y_test, file_name_training_list, file_name_test_list = \
        load_training_set_and_test_set(
            test_data_ratio=0.03)  # we have a separate dataset for testing so keeping the test data ratio low

    model = cnn()

    model.fit(x_train, y_train,
              batch_size=config["batch_size"],
              epochs=config["number_of_epochs"],
              verbose=1,
              validation_data=(x_test, y_test),
              callbacks=[TensorBoard(log_dir=config["tensorboard_log_directory"])]
              )
    score = model.evaluate(x_test, y_test, verbose=0)
    log.info('Test loss: %f' % (score[0]))
    log.info('Test accuracy %f' % (score[1]))

    # Save weight
    weight_path = Path(config["weight_file"])
    if weight_path.parent.exists() is False:
        log.info("Not found weight directory %s. Creating." % (weight_path.parent))
        weight_path.parent.mkdir()

    model.save_weights(weight_path)


def main():
    train()


if __name__ == "__main__":
    main()
